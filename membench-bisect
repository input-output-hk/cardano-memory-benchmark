#!/bin/sh

set -xeu

precision=${1:-25}
start_fail=${2:-1024}
start_pass=${3:-8192}

iteration=0
last_pass=$start_pass
last_fail=$start_fail
buildTimeout=$((30*60))
while true; do
  outcome_gap=$(($last_pass - $last_fail))
  echo "membench:  pass/fail outcome gap: $outcome_gap"
  if test $outcome_gap -le $precision
  then echo "membench:  outcome gap below precision $precision, terminating"; exit 0
  else echo "membench:  outcome gap above precision $precision, next iteration"; fi

  if [ -e membench-last-pass ]; then
    # fail automatically if the build takes 1.5x longer then the last passing run
    buildTimeout=$(jq < membench-last-pass/refined.json '.totaltime * 1.5 | floor')
  fi

  nextLimit=$((($last_fail + $last_pass) / 2))

  time nix-build -A membench --argstr rtsMemSize ${nextLimit}M -o result-${nextLimit} -Q --option timeout ${buildTimeout}

  lastResult=$(jq .failed "result-${nextLimit}/refined.json")
  if [ x$lastResult = xfalse ]; then
    outcome=pass
    last_pass=$nextLimit
  else
    outcome=fail
    last_fail=$nextLimit
  fi

  cp -f "result-${nextLimit}/refined.json" 'membench-last-'$outcome'.json'
  nix-store -r $(readlink result-${nextLimit}) --add-root membench-last-${outcome} --indirect

  echo "--------------------------------- iteration $iteration boundaries:"
  jq . 'membench-last-fail.json' || true
  jq . 'membench-last-pass.json' || true
done
